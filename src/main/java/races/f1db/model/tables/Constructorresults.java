/*
 * This file is generated by jOOQ.
 */
package races.f1db.model.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import races.f1db.model.Indexes;
import races.f1db.model.Keys;
import races.f1db.model.Public;
import races.f1db.model.tables.records.ConstructorresultsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Constructorresults extends TableImpl<ConstructorresultsRecord> {

    private static final long serialVersionUID = 585553701;

    /**
     * The reference instance of <code>public.constructorresults</code>
     */
    public static final Constructorresults CONSTRUCTORRESULTS = new Constructorresults();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConstructorresultsRecord> getRecordType() {
        return ConstructorresultsRecord.class;
    }

    /**
     * The column <code>public.constructorresults.constructorresultsid</code>.
     */
    public final TableField<ConstructorresultsRecord, Integer> CONSTRUCTORRESULTSID = createField("constructorresultsid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('constructorresults_constructorresultsid_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.constructorresults.raceid</code>.
     */
    public final TableField<ConstructorresultsRecord, Integer> RACEID = createField("raceid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.constructorresults.constructorid</code>.
     */
    public final TableField<ConstructorresultsRecord, Integer> CONSTRUCTORID = createField("constructorid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.constructorresults.points</code>.
     */
    public final TableField<ConstructorresultsRecord, Double> POINTS = createField("points", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.constructorresults.status</code>.
     */
    public final TableField<ConstructorresultsRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>public.constructorresults</code> table reference
     */
    public Constructorresults() {
        this(DSL.name("constructorresults"), null);
    }

    /**
     * Create an aliased <code>public.constructorresults</code> table reference
     */
    public Constructorresults(String alias) {
        this(DSL.name(alias), CONSTRUCTORRESULTS);
    }

    /**
     * Create an aliased <code>public.constructorresults</code> table reference
     */
    public Constructorresults(Name alias) {
        this(alias, CONSTRUCTORRESULTS);
    }

    private Constructorresults(Name alias, Table<ConstructorresultsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Constructorresults(Name alias, Table<ConstructorresultsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Constructorresults(Table<O> child, ForeignKey<O, ConstructorresultsRecord> key) {
        super(child, key, CONSTRUCTORRESULTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRUCTORRESULTS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ConstructorresultsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CONSTRUCTORRESULTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ConstructorresultsRecord> getPrimaryKey() {
        return Keys.CONSTRUCTORRESULTS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ConstructorresultsRecord>> getKeys() {
        return Arrays.<UniqueKey<ConstructorresultsRecord>>asList(Keys.CONSTRUCTORRESULTS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Constructorresults as(String alias) {
        return new Constructorresults(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Constructorresults as(Name alias) {
        return new Constructorresults(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Constructorresults rename(String name) {
        return new Constructorresults(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Constructorresults rename(Name name) {
        return new Constructorresults(name, null);
    }
}
