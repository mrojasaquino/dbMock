/*
 * This file is generated by jOOQ.
 */
package races.f1db.model.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import races.f1db.model.Indexes;
import races.f1db.model.Keys;
import races.f1db.model.Public;
import races.f1db.model.tables.records.ConstructorstandingsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Constructorstandings extends TableImpl<ConstructorstandingsRecord> {

    private static final long serialVersionUID = 1530282067;

    /**
     * The reference instance of <code>public.constructorstandings</code>
     */
    public static final Constructorstandings CONSTRUCTORSTANDINGS = new Constructorstandings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConstructorstandingsRecord> getRecordType() {
        return ConstructorstandingsRecord.class;
    }

    /**
     * The column <code>public.constructorstandings.constructorstandingsid</code>.
     */
    public final TableField<ConstructorstandingsRecord, Integer> CONSTRUCTORSTANDINGSID = createField("constructorstandingsid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('constructorstandings_constructorstandingsid_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.constructorstandings.raceid</code>.
     */
    public final TableField<ConstructorstandingsRecord, Integer> RACEID = createField("raceid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.constructorstandings.constructorid</code>.
     */
    public final TableField<ConstructorstandingsRecord, Integer> CONSTRUCTORID = createField("constructorid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.constructorstandings.points</code>.
     */
    public final TableField<ConstructorstandingsRecord, Double> POINTS = createField("points", org.jooq.impl.SQLDataType.DOUBLE.nullable(false).defaultValue(org.jooq.impl.DSL.field("'0'::double precision", org.jooq.impl.SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>public.constructorstandings.position</code>.
     */
    public final TableField<ConstructorstandingsRecord, Integer> POSITION = createField("position", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.constructorstandings.positiontext</code>.
     */
    public final TableField<ConstructorstandingsRecord, String> POSITIONTEXT = createField("positiontext", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.constructorstandings.wins</code>.
     */
    public final TableField<ConstructorstandingsRecord, Integer> WINS = createField("wins", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.constructorstandings</code> table reference
     */
    public Constructorstandings() {
        this(DSL.name("constructorstandings"), null);
    }

    /**
     * Create an aliased <code>public.constructorstandings</code> table reference
     */
    public Constructorstandings(String alias) {
        this(DSL.name(alias), CONSTRUCTORSTANDINGS);
    }

    /**
     * Create an aliased <code>public.constructorstandings</code> table reference
     */
    public Constructorstandings(Name alias) {
        this(alias, CONSTRUCTORSTANDINGS);
    }

    private Constructorstandings(Name alias, Table<ConstructorstandingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Constructorstandings(Name alias, Table<ConstructorstandingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Constructorstandings(Table<O> child, ForeignKey<O, ConstructorstandingsRecord> key) {
        super(child, key, CONSTRUCTORSTANDINGS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRUCTORSTANDINGS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ConstructorstandingsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CONSTRUCTORSTANDINGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ConstructorstandingsRecord> getPrimaryKey() {
        return Keys.CONSTRUCTORSTANDINGS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ConstructorstandingsRecord>> getKeys() {
        return Arrays.<UniqueKey<ConstructorstandingsRecord>>asList(Keys.CONSTRUCTORSTANDINGS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Constructorstandings as(String alias) {
        return new Constructorstandings(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Constructorstandings as(Name alias) {
        return new Constructorstandings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Constructorstandings rename(String name) {
        return new Constructorstandings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Constructorstandings rename(Name name) {
        return new Constructorstandings(name, null);
    }
}
