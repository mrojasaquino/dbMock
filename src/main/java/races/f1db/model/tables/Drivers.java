/*
 * This file is generated by jOOQ.
 */
package races.f1db.model.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import races.f1db.model.Indexes;
import races.f1db.model.Keys;
import races.f1db.model.Public;
import races.f1db.model.tables.records.DriversRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Drivers extends TableImpl<DriversRecord> {

    private static final long serialVersionUID = 759246116;

    /**
     * The reference instance of <code>public.drivers</code>
     */
    public static final Drivers DRIVERS = new Drivers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DriversRecord> getRecordType() {
        return DriversRecord.class;
    }

    /**
     * The column <code>public.drivers.driverid</code>.
     */
    public final TableField<DriversRecord, Integer> DRIVERID = createField("driverid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('drivers_driverid_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.drivers.driverref</code>.
     */
    public final TableField<DriversRecord, String> DRIVERREF = createField("driverref", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.drivers.number</code>.
     */
    public final TableField<DriversRecord, Integer> NUMBER = createField("number", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.drivers.code</code>.
     */
    public final TableField<DriversRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(3).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.drivers.forename</code>.
     */
    public final TableField<DriversRecord, String> FORENAME = createField("forename", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.drivers.surname</code>.
     */
    public final TableField<DriversRecord, String> SURNAME = createField("surname", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.drivers.dob</code>.
     */
    public final TableField<DriversRecord, Date> DOB = createField("dob", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>public.drivers.nationality</code>.
     */
    public final TableField<DriversRecord, String> NATIONALITY = createField("nationality", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.drivers.url</code>.
     */
    public final TableField<DriversRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>public.drivers</code> table reference
     */
    public Drivers() {
        this(DSL.name("drivers"), null);
    }

    /**
     * Create an aliased <code>public.drivers</code> table reference
     */
    public Drivers(String alias) {
        this(DSL.name(alias), DRIVERS);
    }

    /**
     * Create an aliased <code>public.drivers</code> table reference
     */
    public Drivers(Name alias) {
        this(alias, DRIVERS);
    }

    private Drivers(Name alias, Table<DriversRecord> aliased) {
        this(alias, aliased, null);
    }

    private Drivers(Name alias, Table<DriversRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Drivers(Table<O> child, ForeignKey<O, DriversRecord> key) {
        super(child, key, DRIVERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DRIVERS_PKEY, Indexes.DRIVERS_URL_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DriversRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DRIVERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DriversRecord> getPrimaryKey() {
        return Keys.DRIVERS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DriversRecord>> getKeys() {
        return Arrays.<UniqueKey<DriversRecord>>asList(Keys.DRIVERS_PKEY, Keys.DRIVERS_URL_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Drivers as(String alias) {
        return new Drivers(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Drivers as(Name alias) {
        return new Drivers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Drivers rename(String name) {
        return new Drivers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Drivers rename(Name name) {
        return new Drivers(name, null);
    }
}
