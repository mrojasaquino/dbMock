/*
 * This file is generated by jOOQ.
 */
package races.f1db.model.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import races.f1db.model.Indexes;
import races.f1db.model.Keys;
import races.f1db.model.Public;
import races.f1db.model.tables.records.DriverstandingsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Driverstandings extends TableImpl<DriverstandingsRecord> {

    private static final long serialVersionUID = -1796452743;

    /**
     * The reference instance of <code>public.driverstandings</code>
     */
    public static final Driverstandings DRIVERSTANDINGS = new Driverstandings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DriverstandingsRecord> getRecordType() {
        return DriverstandingsRecord.class;
    }

    /**
     * The column <code>public.driverstandings.driverstandingsid</code>.
     */
    public final TableField<DriverstandingsRecord, Integer> DRIVERSTANDINGSID = createField("driverstandingsid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('driverstandings_driverstandingsid_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.driverstandings.raceid</code>.
     */
    public final TableField<DriverstandingsRecord, Integer> RACEID = createField("raceid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.driverstandings.driverid</code>.
     */
    public final TableField<DriverstandingsRecord, Integer> DRIVERID = createField("driverid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.driverstandings.points</code>.
     */
    public final TableField<DriverstandingsRecord, Double> POINTS = createField("points", org.jooq.impl.SQLDataType.DOUBLE.nullable(false).defaultValue(org.jooq.impl.DSL.field("'0'::double precision", org.jooq.impl.SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>public.driverstandings.position</code>.
     */
    public final TableField<DriverstandingsRecord, Integer> POSITION = createField("position", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.driverstandings.positiontext</code>.
     */
    public final TableField<DriverstandingsRecord, String> POSITIONTEXT = createField("positiontext", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.driverstandings.wins</code>.
     */
    public final TableField<DriverstandingsRecord, Integer> WINS = createField("wins", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.driverstandings</code> table reference
     */
    public Driverstandings() {
        this(DSL.name("driverstandings"), null);
    }

    /**
     * Create an aliased <code>public.driverstandings</code> table reference
     */
    public Driverstandings(String alias) {
        this(DSL.name(alias), DRIVERSTANDINGS);
    }

    /**
     * Create an aliased <code>public.driverstandings</code> table reference
     */
    public Driverstandings(Name alias) {
        this(alias, DRIVERSTANDINGS);
    }

    private Driverstandings(Name alias, Table<DriverstandingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Driverstandings(Name alias, Table<DriverstandingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Driverstandings(Table<O> child, ForeignKey<O, DriverstandingsRecord> key) {
        super(child, key, DRIVERSTANDINGS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DRIVERSTANDINGS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DriverstandingsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DRIVERSTANDINGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DriverstandingsRecord> getPrimaryKey() {
        return Keys.DRIVERSTANDINGS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DriverstandingsRecord>> getKeys() {
        return Arrays.<UniqueKey<DriverstandingsRecord>>asList(Keys.DRIVERSTANDINGS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Driverstandings as(String alias) {
        return new Driverstandings(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Driverstandings as(Name alias) {
        return new Driverstandings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Driverstandings rename(String name) {
        return new Driverstandings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Driverstandings rename(Name name) {
        return new Driverstandings(name, null);
    }
}
