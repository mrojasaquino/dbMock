/*
 * This file is generated by jOOQ.
 */
package races.f1db.model.tables;


import java.sql.Date;
import java.sql.Time;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import races.f1db.model.Indexes;
import races.f1db.model.Keys;
import races.f1db.model.Public;
import races.f1db.model.tables.records.RacesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Races extends TableImpl<RacesRecord> {

    private static final long serialVersionUID = -2064809059;

    /**
     * The reference instance of <code>public.races</code>
     */
    public static final Races RACES = new Races();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RacesRecord> getRecordType() {
        return RacesRecord.class;
    }

    /**
     * The column <code>public.races.raceid</code>.
     */
    public final TableField<RacesRecord, Integer> RACEID = createField("raceid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('races_raceid_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.races.year</code>.
     */
    public final TableField<RacesRecord, Integer> YEAR = createField("year", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.races.round</code>.
     */
    public final TableField<RacesRecord, Integer> ROUND = createField("round", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.races.circuitid</code>.
     */
    public final TableField<RacesRecord, Integer> CIRCUITID = createField("circuitid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.races.name</code>.
     */
    public final TableField<RacesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.races.date</code>.
     */
    public final TableField<RacesRecord, Date> DATE = createField("date", org.jooq.impl.SQLDataType.DATE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * The column <code>public.races.time</code>.
     */
    public final TableField<RacesRecord, Time> TIME = createField("time", org.jooq.impl.SQLDataType.TIME, this, "");

    /**
     * The column <code>public.races.url</code>.
     */
    public final TableField<RacesRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>public.races</code> table reference
     */
    public Races() {
        this(DSL.name("races"), null);
    }

    /**
     * Create an aliased <code>public.races</code> table reference
     */
    public Races(String alias) {
        this(DSL.name(alias), RACES);
    }

    /**
     * Create an aliased <code>public.races</code> table reference
     */
    public Races(Name alias) {
        this(alias, RACES);
    }

    private Races(Name alias, Table<RacesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Races(Name alias, Table<RacesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Races(Table<O> child, ForeignKey<O, RacesRecord> key) {
        super(child, key, RACES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RACES_PKEY, Indexes.RACES_URL_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RacesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RACES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RacesRecord> getPrimaryKey() {
        return Keys.RACES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RacesRecord>> getKeys() {
        return Arrays.<UniqueKey<RacesRecord>>asList(Keys.RACES_PKEY, Keys.RACES_URL_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Races as(String alias) {
        return new Races(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Races as(Name alias) {
        return new Races(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Races rename(String name) {
        return new Races(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Races rename(Name name) {
        return new Races(name, null);
    }
}
